---
version: "3.8"
services:
  backend-flask:
    environment:
      FRONTEND_URL: https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}
      BACKEND_URL: https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}
      OTEL_SERVICE_NAME: 'cruddur-backend-flask'
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      AWS_XRAY_URL: "*4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}*"
      AWS_XRAY_DAEMON_ADDRESS: "xray-daemon:2000"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      ROLLBAR_ACCESS_TOKEN: "${ROLLBAR_ACCESS_TOKEN}"
      AWS_COGNITO_USER_POOL_ID: "us-west-2_jC4wpfY1b"
      AWS_COGNITO_USER_POOL_CLIENT_ID: "4mq8n71ja47g2t9cd616t3p136"
    build: ./backend-flask
    container_name: backend
    ports:
      - 4567:4567
    depends_on:
      - db
      - dynamodb
    healthcheck:
      test: ["CMD", "wget", "-q", "-O/dev/null", "http://127.0.0.1:4567/api/activities/home", "--header", "Accept: application/json", "--header", "Content-Type: application/json"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - type: bind
        source: ./backend-flask
        target: /backend-flask
        read_only: true
  frontend-react-js:
    environment:
      REACT_APP_BACKEND_URL: https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}
      REACT_APP_AWS_PROJECT_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_COGNITO_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_USER_POOLS_ID: "us-west-2_jC4wpfY1b"
      REACT_APP_CLIENT_ID: "4mq8n71ja47g2t9cd616t3p136"
    build: ./frontend-react-js
    container_name: frontend
    ports:
      - 3000:3000
    depends_on:
      - backend-flask
    healthcheck:
      test: ["CMD", "wget", "-q", "-O/dev/null", "http://127.0.0.1:3000"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 15s
    volumes:
      - type: bind
        source: ./frontend-react-js/src
        target: /frontend-react-js/src
        read_only: true
  db:
    image: postgres:13-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    container_name: db
    ports:
      - 5432:5432
    volumes:
      - type: bind
        source: /workspace/docker/psqldb
        target: /var/lib/postgresql/data
  dynamodb:
    # https://stackoverflow.com/questions/67533058/persist-local-dynamodb-data-in-volumes-lack-permission-unable-to-open-databa
    # We needed to add user:root to get this working.
    user: root
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath ./data
    image: amazon/dynamodb-local:latest
    restart: unless-stopped
    container_name: dynamodb
    ports:
      - 8000:8000
    volumes:
      - type: bind
        source: /workspace/docker/dynamodb
        target: /home/dynamodblocal/data
    working_dir: /home/dynamodblocal
  xray-daemon:
    image: "amazon/aws-xray-daemon"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_REGION: "${AWS_DEFAULT_REGION}"
    command:
      - "xray -o -b xray-daemon:2000"
    ports:
      - 2000:2000/udp
# the name flag is a hack to change the default prepend folder
# name when outputting the image names
networks:
  internal-network:
    driver: bridge
    name: cruddur
