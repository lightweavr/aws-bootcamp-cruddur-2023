AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Presign lambda + JWT Authorizer
Parameters:
  MemorySize:
    Type: Number
    Default: 128
    MinValue: 128
    MaxValue: 1024
  Timeout:
    Type: Number
    Default: 3
  CognitoClientId:
    Type: String
    Default: 4mq8n71ja47g2t9cd616t3p136
  CognitoUserPoolId:
    Type: String
    Default: us-west-2_jC4wpfY1b

Resources:
  JwtAuthorizerLambda:
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Type: AWS::Serverless::Function
    Properties:
      Description: Validates a JWT
      CodeUri: lambda-authorizer
      PackageType: Zip
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt ExecutionRole.Arn
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Environment:
        Variables:
          CLIENT_ID: !Ref CognitoClientId
          USER_POOL_ID: !Ref CognitoUserPoolId

  LambdaLogGroup:
    # Set the log retention
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${JwtAuthorizerLambda}"
      RetentionInDays: 7

  ExecutionRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"

Outputs:
  PresignAuthorizerArn:
    Value: !GetAtt JwtAuthorizerLambda.Arn
    Export:
      Name: PresignAuthorizerArn
