AWSTemplateFormatVersion: 2010-09-09

Description: |
  The networking and cluster configuration to support fargate containers
  - ECS Fargate Cluster
  - API Gateway v2
    - VPC Link
    - Domain name
    - certificate attached from Amazon Certification Manager (ACM)
  - API Gateway Security Group
  - Backend Target Group

Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of networking components eg. VPC, Subnets
    Default: Cruddernetworking
  HostedZoneID:
    Type: AWS::Route53::HostedZone::Id
    Default: Z011980921HYJG4UHJ71K

Resources:
  # Backend on Fargate
  EcsCluster:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}EcsCluster"
      CapacityProviders:
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: !GetAtt CloudMapNamespace.Arn
  EcsClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ServSG"
      GroupDescription: Security for Fargate Services for Cruddur
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      # No egress = All traffic allowed
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#aws-properties-ec2-security-group--examples--Remove_the_default_rule
      # Allow all traffic from API Gateway SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt ApiGatewaySG.GroupId
          FromPort: 4567
          ToPort: 4567
          Description: API Gateway Traffic

  # Ingress through API Gateway
  ApiGateway:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-api.html
    Type: AWS::ApiGatewayV2::Api
    Properties:
      # No CORS configuration, everything is proxied through
      Name: CruddrBackendAPI
      ProtocolType: HTTP
      Version: v1
  ApiGatewaySG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ApiGatewaySG"
      GroupDescription: Public Facing SG for API Gateway
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
          Description: INTERNET HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
          Description: INTERNET HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: "::/0"
          Description: INTERNET HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: "::/0"
          Description: INTERNET HTTP
  ApiGatewayVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: CruddurVpcLink
      SecurityGroupIds:
        - !Ref ApiGatewaySG
      SubnetIds:
        !Split [",", Fn::ImportValue: !Sub "${NetworkingStack}PublicSubnetIds"]

  # Service Discovery through CloudMap
  CloudMapNamespace:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Description: Namespace for crudur backend registration
      Name: CruddurBackendNamespace
  CloudMapService:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      Description: Service based on a public DNS namespace
      Name: CruddurBackendService
      NamespaceId: !Ref CloudMapNamespace

  ApiGatewayRouteToCloudMap:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      ConnectionId: !Ref ApiGatewayVpcLink
      ConnectionType: VPC_LINK
      Description: Proxy all requests to Cruddur Backend
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      PayloadFormatVersion: 1.0
      IntegrationUri: !GetAtt CloudMapService.Arn
      # IntegrationUri: arn:aws:servicediscovery:us-west-2:017145807427:service/srv-pflj4kgref5n4cuu
      TimeoutInMillis: 30000

  BackendCertificate:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join [., [api, !ImportValue CrudderfrontendDNSName]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join [., [api, !ImportValue CrudderfrontendDNSName]]
          HostedZoneId: !Ref HostedZoneID

Outputs:
  ClusterName:
    Value: !Ref EcsCluster
    Export:
      Name: !Sub "${AWS::StackName}ClusterName"
  EcsClusterSG:
    Value: !GetAtt EcsClusterSG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}EcsClusterSGId"
  CloudMapServiceRegistry:
    Value: !GetAtt CloudMapService.Arn
    Export:
      Name: !Sub "${AWS::StackName}CloudMapServiceRegistry"
