AWSTemplateFormatVersion: 2010-09-09

Description: |
  The networking and cluster configuration to support fargate containers
  - ECS Fargate Cluster
  - API Gateway v2
    - VPC Link
    - Domain name
    - certificate attached from Amazon Certification Manager (ACM)
  - API Gateway Security Group
  - Backend Target Group

Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of networking components eg. VPC, Subnets
    Default: Cruddurnetworking
  FrontendStack:
    Type: String
    Description: This is our base layer of networking components eg. VPC, Subnets
    Default: Cruddurfrontend
  HostedZoneID:
    Type: AWS::Route53::HostedZone::Id
    Default: Z011980921HYJG4UHJ71K

Resources:
  # Ingress through API Gateway
  ApiGateway:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-api.html
    Type: AWS::ApiGatewayV2::Api
    Properties:
      # No CORS configuration, everything is proxied through
      Name: CruddrBackendAPI
      Description: Front the ECS services & the presigned upload key creator
      ProtocolType: HTTP
      Version: v1
  ApiGatewaySG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ApiGatewaySG"
      GroupDescription: Public Facing SG for API Gateway
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
          Description: INTERNET HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
          Description: INTERNET HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: "::/0"
          Description: INTERNET HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: "::/0"
          Description: INTERNET HTTP
  ApiGatewayVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: CruddurVpcLink
      SecurityGroupIds:
        - !Ref ApiGatewaySG
      SubnetIds:
        !Split [",", Fn::ImportValue: !Sub "${NetworkingStack}PublicSubnetIds"]

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ServSG"
      GroupDescription: Security group for services receiving traffic _from_ API Gateway
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      # No egress = All traffic allowed
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#aws-properties-ec2-security-group--examples--Remove_the_default_rule
      # Allow all traffic from API Gateway SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt ApiGatewaySG.GroupId
          FromPort: 4567
          ToPort: 4567
          Description: API Gateway Traffic

  # Service Discovery through CloudMap
  ServiceConnectNamespace:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html
    Type: AWS::ServiceDiscovery::HttpNamespace
    Properties:
      Description: Namespace for crudur backend registration
      Name: CruddurServiceConnectNamespace

  # ECS Service Registry only works with Private DNS
  CruddurBackendNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: CruddurBackendNamespace
      Vpc:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId

  CruddurBackendServiceMap:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Cruddur backend
      NamespaceId: !Ref CruddurBackendNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 30
            Type: SRV
        RoutingPolicy: WEIGHTED
      # Random tip from https://repost.aws/knowledge-center/cloudformation-ecs-service-discovery
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ApiGatewayRouteToCloudMap:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      ConnectionId: !Ref ApiGatewayVpcLink
      ConnectionType: VPC_LINK
      Description: Proxy all requests to Cruddur Backend
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      PayloadFormatVersion: 1.0
      IntegrationUri: !GetAtt CruddurBackendServiceMap.Arn
      TimeoutInMillis: 30000

  # Presign Lambdas
  PresignLambda:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      Description: Lambda to generate Presigned S3 URLs for upload
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":apigateway:"
          - !Ref "AWS::Region"
          - ":lambda:path/2015-03-31/functions/"
          - !ImportValue PresignArn
          - /invocations
      TimeoutInMillis: 30000
  PresignAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref ApiGateway
      AuthorizerPayloadFormatVersion: "2.0"
      AuthorizerResultTtlInSeconds: 300
      AuthorizerType: REQUEST
      AuthorizerUri: !Join
        - ""
        - - "arn:"
          - !Ref "AWS::Partition"
          - ":apigateway:"
          - !Ref "AWS::Region"
          - ":lambda:path/2015-03-31/functions/"
          - !ImportValue PresignAuthorizerArn
          - /invocations
      EnableSimpleResponses: true
      IdentitySource:
        - $request.header.Authorization
      Name: jwt-authorizer

  PresignRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref PresignAuthorizer
      RouteKey: POST /avatars/upload_presign_key
      Target: !Sub integrations/${PresignLambda}

  PresignOptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      AuthorizationType: NONE
      RouteKey: OPTIONS /avatars/upload_presign_key
      Target: !Sub integrations/${PresignLambda}

  BackendDomainName:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName:
        !Join [., [api, Fn::ImportValue: !Sub "${FrontendStack}DNSName"]]
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref BackendCertificate
          CertificateName: BackendCertificate
          SecurityPolicy: TLS_1_2

  BackendCertificate:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        !Join [., [api, Fn::ImportValue: !Sub "${FrontendStack}DNSName"]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:
            !Join [., [api, Fn::ImportValue: !Sub "${FrontendStack}DNSName"]]
          HostedZoneId: !Ref HostedZoneID

  MapDnsNameToApi:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref ApiGateway
      DomainName: !Ref BackendDomainName
      Stage: !Ref DefaultApiGatewayStage

  DomainIPv4Alias:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneID
      Name: !Join [., [api, Fn::ImportValue: !Sub "${FrontendStack}DNSName"]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt BackendDomainName.RegionalDomainName
        HostedZoneId: !GetAtt BackendDomainName.RegionalHostedZoneId

  DomainIPv6Alias:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneID
      Name: !Join [., [api, Fn::ImportValue: !Sub "${FrontendStack}DNSName"]]
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt BackendDomainName.RegionalDomainName
        HostedZoneId: !GetAtt BackendDomainName.RegionalHostedZoneId

  DefaultApiGatewayStage:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-stage.html
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt LogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      ApiId: !Ref ApiGateway
      AutoDeploy: true
      Description: Default stage
      StageName: $default

  DefaultApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      AuthorizationType: NONE
      RouteKey: $default
      Target: !Sub integrations/${ApiGatewayRouteToCloudMap}

  LogGroup:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/cruddur/api-gateway/${ApiGateway}"
      RetentionInDays: 7

Outputs:
  ServiceSG:
    Value: !GetAtt ServiceSG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}ServiceSGId"
  ServiceConnectNamespace:
    Value: !GetAtt ServiceConnectNamespace.Arn
    Export:
      Name: !Sub "${AWS::StackName}ServiceConnectNamespace"
  CruddurBackendServiceRegistry:
    Value: !GetAtt CruddurBackendServiceMap.Arn
    Export:
      Name: !Sub "${AWS::StackName}CruddurBackendServiceRegistry"
