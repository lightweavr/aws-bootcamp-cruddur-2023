AWSTemplateFormatVersion: 2010-09-09
Description: |
  Task Definition
  Fargate Service
  Execution Role
  Task Role

Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of networking components eg. VPC, Subnets
    Default: Cruddernetworking
  BackendStack:
    Type: String
    Description: This is our cluster layer eg. ECS Cluster, ALB
    Default: Crudderbackend
  ContainerPort:
    Type: Number
    Default: 4567
  ServiceCpu:
    Type: String
    Default: "256"
  ServiceMemory:
    Type: String
    Default: "512"
  ServiceName:
    Type: String
    Default: backend-flask
  ContainerName:
    Type: String
    Default: backend-flask
  TaskFamily:
    Type: String
    Default: backend-flask
  EcrImage:
    Type: String
    Default: "017145807427.dkr.ecr.us-west-2.amazonaws.com/backend-flask"
  EnvOtelServiceName:
    Type: String
    Default: backend-flask
  EnvOtelExporterOtlpEndpoint:
    Type: String
    Default: https://api.honeycomb.io
  EnvAWSCognitoUserPoolId:
    Type: String
    Default: us-west-2_jC4wpfY1b
  EnvCognitoUserPoolClientId:
    Type: String
    Default: 4mq8n71ja47g2t9cd616t3p136
  EnvFrontendUrl:
    Type: String
    Default: "*"
  EnvBackendUrl:
    Type: String
    Default: "*"
  EnvDbUser:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/cruddur/db/user"
  EnvDbEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/cruddur/db/endpoint"
  SecretsDbPassword:
    Type: AWS::SSM::Parameter::Name
    Default: "/cruddur/db/password"
  SecretsRollbarAccessToken:
    Type: AWS::SSM::Parameter::Name
    Default: "/cruddur/backend-flask/ROLLBAR_ACCESS_TOKEN"
  SecretsOtelExporterOltpHeaders:
    Type: AWS::SSM::Parameter::Name
    Default: "/cruddur/backend-flask/OTEL_EXPORTER_OTLP_HEADERS"

Resources:
  # Backend on Fargate
  EcsCluster:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}EcsCluster"
      CapacityProviders:
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace:
          Fn::ImportValue: !Sub ${BackendStack}CloudMapServiceNamespace
  EcsClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ServSG"
      GroupDescription: Security for Fargate Services for Cruddur
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      # No egress = All traffic allowed
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#aws-properties-ec2-security-group--examples--Remove_the_default_rule
      # Allow all traffic from API Gateway SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${BackendStack}ApiGatewaySGId
          FromPort: 4567
          ToPort: 4567
          Description: API Gateway Traffic

  CruddurService:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !GetAtt EcsClusterSG.GroupId
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue: !Sub "${NetworkingStack}PublicSubnetIds"
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceConnectConfiguration:
        Enabled: true
        Namespace:
          Fn::ImportValue: !Sub ${BackendStack}CloudMapServiceNamespace
        # TODO - If you want to log
        # LogConfiguration
        Services:
          - DiscoveryName: !Ref ServiceName
            PortName: !Ref ServiceName
            ClientAliases:
              - Port: !Ref ContainerPort
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue: !Sub ${BackendStack}CloudMapServiceRegistry
      #    Port: !Ref ContainerPort
      #    ContainerName: 'backend-flask'
      #    ContainerPort: !Ref ContainerPort
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref TaskDefinition

  TaskDefinition:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Ref TaskFamily
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: "awsvpc"
      Cpu: !Ref ServiceCpu
      Memory: !Ref ServiceMemory
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions:
        - Name: "xray"
          Image: "public.ecr.aws/xray/aws-xray-daemon"
          Essential: true
          User: "1337"
          PortMappings:
            - Name: "xray"
              ContainerPort: 2000
              Protocol: "udp"
        - Name: "backend-flask"
          Image: !Ref EcrImage
          Essential: true
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "python /backend-flask/bin/health-check backend"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          PortMappings:
            - Name: !Ref ContainerName
              ContainerPort: !Ref ContainerPort
              Protocol: "tcp"
              AppProtocol: "http"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref EcsLogStream
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: "OTEL_SERVICE_NAME"
              Value: !Ref EnvOtelServiceName
            - Name: "OTEL_EXPORTER_OTLP_ENDPOINT"
              Value: !Ref EnvOtelExporterOtlpEndpoint
            - Name: "AWS_COGNITO_USER_POOL_ID"
              Value: !Ref EnvAWSCognitoUserPoolId
            - Name: "AWS_COGNITO_USER_POOL_CLIENT_ID"
              Value: !Ref EnvCognitoUserPoolClientId
            - Name: "FRONTEND_URL"
              Value: !Ref EnvFrontendUrl
            - Name: "BACKEND_URL"
              Value: !Ref EnvBackendUrl
            - Name: "AWS_DEFAULT_REGION"
              Value: !Ref AWS::Region
            - Name: "DB_ENDPOINT"
              Value: !Ref EnvDbEndpoint
            - Name: "DB_USER"
              Value: !Ref EnvDbUser
          Secrets:
            - Name: "DB_PASSWORD"
              ValueFrom: !Ref SecretsDbPassword
            - Name: "ROLLBAR_ACCESS_TOKEN"
              ValueFrom: !Ref SecretsRollbarAccessToken
            - Name: "OTEL_EXPORTER_OTLP_HEADERS"
              ValueFrom: !Ref SecretsOtelExporterOltpHeaders

  EcsLogStream:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    # Set the log retention
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/cruddur/ecs/${ServiceName}"
      RetentionInDays: 7

  ExecutionRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "cruddur-execution-ecr-and-ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ECRPullThrough"
                Effect: "Allow"
                Action:
                  - "ecr:DescribePullThroughCacheRules"
                  - "ecr:DescribeRegistry"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetRegistryPolicy"
                  - "ecr:GetRegistryScanningConfiguration"
                Resource: "*"

              - Sid: "ECR"
                Effect: "Allow"
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchGetRepositoryScanningConfiguration"
                  - "ecr:DescribeImageReplicationStatus"
                  - "ecr:DescribeImages"
                  - "ecr:DescribeImageScanFindings"
                  - "ecr:DescribeRepositories"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetLifecyclePolicy"
                  - "ecr:GetLifecyclePolicyPreview"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:ListImages"
                  - "ecr:ListTagsForResource"
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"

              - Sid: "SSM"
                Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cruddur/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  TaskRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "cruddur-task-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "SSMAccessPolicy"
                Effect: "Allow"
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
              - Sid: CruddurDynamoDB
                Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Query"
                  - "dynamodb:ListTables"
                  - "dynamodb:ListImports"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
Outputs:
  ServiceName:
    Value: !GetAtt CruddurService.Name
    Export:
      Name: !Sub "${AWS::StackName}ServiceName"
