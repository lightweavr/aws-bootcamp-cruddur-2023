#!/bin/bash

ABS_PATH=$(readlink -f "$0")
BIN_PATH=$(dirname "$ABS_PATH")
PROJECT_PATH=$(dirname "$BIN_PATH")
FRONTEND_REACT_JS_PATH="$PROJECT_PATH/frontend-react-js"
ACCOUNT_ID="017145807427"


function connect() {
    aws ecs execute-command --region "$AWS_DEFAULT_REGION" --cluster cruddur --task "$(aws ecs list-tasks --cluster cruddur --service-name "$1" |jq .taskArns[0] --raw-output)" --container "$1" --command "/bin/sh" --interactive
}

function build_prod() {
    DIRPATH="${PROJECT_PATH}"/"$1"
    docker build -f "${DIRPATH}/Dockerfile.prod" -t "$1"-prod "${DIRPATH}/."

}

function build() {
    # Expects $1 to be a path instead of a name
    docker build -f "$2/Dockerfile" -t "$1" "$2/."
}

function build_react() {
    # No args
    docker build \
    --build-arg REACT_APP_BACKEND_URL="https://api.cpbc.lightweaver.ca" \
    --build-arg REACT_APP_API_GATEWAY_ENDPOINT_URL="https://api.cpbc.lightweaver.ca" \
    --build-arg REACT_APP_AWS_PROJECT_REGION="$AWS_DEFAULT_REGION" \
    --build-arg REACT_APP_AWS_COGNITO_REGION="$AWS_DEFAULT_REGION" \
    --build-arg REACT_APP_AWS_USER_POOLS_ID="us-west-2_jC4wpfY1b" \
    --build-arg REACT_APP_CLIENT_ID="4mq8n71ja47g2t9cd616t3p136" \
    -t frontend-react-js-prod \
    -f "$FRONTEND_REACT_JS_PATH"/Dockerfile.prod \
    "$FRONTEND_REACT_JS_PATH"/ \
    --target=build

    CONTAINER=$(docker create frontend-react-js-prod:latest)
    TEMPDEST=$(mktemp -d)
    docker cp "${CONTAINER}":/frontend-react-js/build/ "${TEMPDEST}"/

    aws s3 sync "${TEMPDEST}" s3://cpbc-lightweaver-ca --delete --exclude='*.map'
    rm -rf "${TEMPDEST}"
    docker rm "${CONTAINER}"
    docker rmi frontend-react-js-prod
}

function tag() {
    # $1 is the container name
    docker tag "$1":latest ${ACCOUNT_ID}.dkr.ecr."${AWS_DEFAULT_REGION}".amazonaws.com/"$1":latest
}

function push() {
    docker push ${ACCOUNT_ID}.dkr.ecr."${AWS_DEFAULT_REGION}".amazonaws.com/"$1":latest
}

function register() {
    aws ecs register-task-definition --cli-input-json "file://$PROJECT_PATH/aws/task-definitions/$1.json"
}

function create() {
    aws ecs create-service --cli-input-json "file://$PROJECT_PATH/aws/json/service-$1.json"
}

function deploy() {
    LATEST_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition "$1" --query 'taskDefinition.taskDefinitionArn' --output text)
    aws ecs update-service --cluster cruddur --service "$1" --task-definition "$LATEST_TASK_DEFINITION_ARN" --force-new-deployment
}

function run() {
    # port should be 3000 for frontend though
    PORT="4567"
    if [ "$1" = "frontend-react-js" ]; then
        PORT="3000"
    fi
    docker run --rm --env-file "$PROJECT_PATH"/"$1".env --network cruddur-net --publish "${PORT}":"${PORT}" -it "$1"
}

function login() {
    aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr."${AWS_DEFAULT_REGION}".amazonaws.com
}


ACTION=$1
shift
TARGET=$1
shift

# Need to translate backend/frontend to whichever respectively - backend-flask/frontend-react-js
if [ "$TARGET" = "frontend" ]; then
    TARGET="frontend-react-js"
elif [ "$TARGET" = "backend" ]; then
    TARGET="backend-flask"
elif [ "$ACTION" = login ]; then
    # pass, don't do anything
    true
else
    echo "Invalid choice for target: $TARGET (choose frontend/backend)"
    exit 1
fi

CYAN='\033[1;36m'
NO_COLOR='\033[0m'

printf "Running ${CYAN}%s${NO_COLOR} on %s\n" "${ACTION}" "${TARGET}"

case $ACTION in
    "connect"|"c") connect "${TARGET}" ;;
    "build-prod") build_prod "${TARGET}" ;;
    "build") build "${TARGET}" ;;
    "sync-react") build_react ;;
    "tag") tag "${TARGET}" ;;
    "push" ) push "${TARGET}" ;;
    "deploy" ) deploy "${TARGET}" ;;
    "run" ) run "${TARGET}" ;;
    "login" ) login ;;

    "tdeploy" )
        tag "${TARGET}"
        push "${TARGET}"
        deploy "${TARGET}" ;;

    "setup"|"init"|"update")
        build_prod "${TARGET}"
        tag "${TARGET}"
        push "${TARGET}"
        deploy "${TARGET}" ;;

    *) echo "Invalid parameter" ;;
esac
