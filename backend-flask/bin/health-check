#!/usr/bin/env python3

import psycopg
import os
import argparse

import urllib.request

def backend():
    try:
        response = urllib.request.urlopen("http://localhost:4567/api/health-check")
        if response.getcode() == 200:
            print("[OK] Flask server is running")
        else:
            print(f"[BAD] Flask server is not responding with 200 OK: {response}")
            exit(1)  # false
    # This for some reason is not capturing the error....
    # except ConnectionRefusedError as e:
    # so we'll just catch on all even though this is a bad practice
    except Exception as e:
        print(f"[BAD] Flask server is not running: {e}")
        exit(1)

def db():
    connection_url = os.getenv("CONNECTION_URL")

    conn = None
    try:
        print("attempting connection")
        conn = psycopg.connect(connection_url)
        print("Connection successful!")
    except psycopg.Error as e:
        print(f"Unable to connect to the database: {e}")
        exit(1)
    finally:
        conn.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CLI for healthchecks")
    parser.add_argument("command", choices=["backend", "db"])
    args = parser.parse_args()

    match args.command:
        case "backend":
            backend()
        case "db":
            db()
        case _:
            print("Not sure how you got here, you didn't provide a valid subcommand")
