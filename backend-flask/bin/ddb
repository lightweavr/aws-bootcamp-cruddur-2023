#!/usr/bin/env python3

import argparse
import json
import pathlib
import os
import sys
import uuid
from datetime import datetime, timedelta, timezone

import boto3

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, ".."))
sys.path.append(parent_path)

from lib.ddb import Ddb


def delete_table(client, table_name: str):
    res = client.delete_table(TableName=table_name)
    print(res["TableDescription"]["TableStatus"])


def list_tables(client):
    response = client.list_tables()
    print(response["TableNames"])


def scan(client, table_name):
    response = client.scan(TableName=table_name, ReturnConsumedCapacity="TOTAL")

    items = response.pop("Items")
    for item in items:
        print(item)
    print(response)


def create(client, table_name):
    response = client.create_table(
        TableName=table_name,
        AttributeDefinitions=[
            {"AttributeName": "pk", "AttributeType": "S"},
            {"AttributeName": "sk", "AttributeType": "S"},
            {"AttributeName": "message_group_uuid", "AttributeType": "S"},
            {"AttributeName": "user_uuid", "AttributeType": "S"},
        ],
        KeySchema=[
            {"AttributeName": "pk", "KeyType": "HASH"},
            {"AttributeName": "sk", "KeyType": "RANGE"},
        ],
        GlobalSecondaryIndexes=[
            {
                "IndexName": "message-group-sk-index",
                "KeySchema": [
                    {"AttributeName": "message_group_uuid", "KeyType": "HASH"},
                    {"AttributeName": "sk", "KeyType": "RANGE"},
                ],
                "Projection": {"ProjectionType": "ALL"},
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5,
                },
            }
        ],
        BillingMode="PROVISIONED",
        ProvisionedThroughput={"ReadCapacityUnits": 5, "WriteCapacityUnits": 5},
    )

    print(response)


def get_user_uuids(first_handle, second_handle):
    # Only reach out to the DB when requested
    from lib.db import db

    # Ideally this should be variable amount of handles
    sql = """
        SELECT
        users.uuid,
        users.display_name,
        users.handle
        FROM users
        WHERE
        users.handle IN(
            %(first_handle)s,
            %(second_handle)s
            )
    """
    users = db.query_array_json(
        sql, {"first_handle": first_handle, "second_handle": second_handle}
    )
    my_user = next((item for item in users if item["handle"] == first_handle), None)
    other_user = next((item for item in users if item["handle"] == second_handle), None)
    results = {"my_user": my_user, "other_user": other_user}
    print("get_user_uuids")
    print(results)
    return results


def create_message_group(
    client,
    message_group_uuid,
    my_user_uuid,
    table_name="cruddur-messages",
    last_message_at=None,
    message=None,
    other_user_uuid=None,
    other_user_display_name=None,
    other_user_handle=None,
):
    # Check to see if a message group already exists
    # Look up GRP#{my_id} and user_uuid=other_user_uuid to see if *I* have a conversation
    # Looking up GRP#{their id} and my user_uuid would see if _they_ have a conversation
    # Thinking about the case where a conversation is deleted
    query_params = {
        "TableName": "cruddur-messages",
        "KeyConditionExpression": "pk = :pk",
        "FilterExpression": "user_uuid = :other_user_uuid",
        "ProjectionExpression": "message_group_uuid",
        "ExpressionAttributeValues": {
            ":pk": {"S": f"GRP#{my_user_uuid}"},
            ":other_user_uuid": {"S": other_user_uuid},
        },
        "ScanIndexForward": False,
        "ReturnConsumedCapacity": "TOTAL",
    }
    response = client.query(**query_params)
    print(f"Check for existing group: {response['Items']}")

    record = {
        "pk": {"S": f"GRP#{my_user_uuid}"},
        "sk": {"S": last_message_at},
        "message_group_uuid": {"S": message_group_uuid},
        "message": {"S": message},
        "user_uuid": {"S": other_user_uuid},
        "user_display_name": {"S": other_user_display_name},
        "user_handle": {"S": other_user_handle},
    }

    response = client.put_item(TableName=table_name, Item=record)
    print(response)


def seed_ddb(client):
    # Load a bunch of data in the past, since we're adding a lot of data, the timestamps are hours in the future
    now = datetime.now(timezone.utc).astimezone() - timedelta(hours=24)
    users = get_user_uuids("andrewbrown", "aj")

    message = "Initializing the conversation"

    message_group_uuid = Ddb.create_message_group(
        client,
        message,
        my_user_uuid=users["my_user"]["uuid"],
        my_user_display_name=users["my_user"]["display_name"],
        my_user_handle=users["my_user"]["handle"],
        other_user_uuid=users["other_user"]["uuid"],
        other_user_display_name=users["other_user"]["display_name"],
        other_user_handle=users["other_user"]["handle"],
    )

    seed_file = (pathlib.Path(__file__).parent / "ddb-seed.txt").resolve()
    with open(seed_file, "r") as f:
        lines = f.readlines()

    items = {
        table_name: []
    }

    for i, line in enumerate(lines):
        line = line.strip()
        if not line:
            continue

        if line.startswith("Person 1: "):
            key = "my_user"
            message = line.replace("Person 1: ", "")
        elif line.startswith("Person 2: "):
            key = "other_user"
            message = line.replace("Person 2: ", "")
        else:
            print(line)
            raise "invalid line"

        created_at = (now + timedelta(minutes=i)).isoformat()
        message = {
            "pk": {"S": f"MSG#{message_group_uuid}"},
            "sk": {"S": created_at},
            "message": {"S": message},
            "message_uuid": {"S": str(uuid.uuid4())},
            "user_uuid": {"S": users[key]["uuid"]},
            "user_display_name": {"S": users[key]["display_name"]},
            "user_handle": {"S": users[key]["handle"]},
        }
        items[table_name].append({"PutRequest": {"Item": message}})


    try:
        response = client.batch_write_item(RequestItems=items)
    except botocore.exceptions.ClientError as e:
        print(e)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CLI to interact with DynamoDB")
    parser.add_argument("command", choices=["delete", "list", "scan", "create", "seed"])
    parser.add_argument("table_name", default="cruddur-messages", nargs="?")
    parser.add_argument("-p", "--prod", action="store_true")
    args = parser.parse_args()

    attrs = {}
    if not args.prod:
        attrs["endpoint_url"] = "http://localhost:8000"

    client = boto3.client("dynamodb", **attrs)

    match args.command:
        case "delete":
            delete_table(client, args.table_name)
        case "list":
            list_tables(client)
        case "scan":
            scan(client, args.table_name)
        case "create":
            create(client, args.table_name)
        case "seed":
            seed_ddb(client)
        case _:
            print("Not sure how you got here, you didn't provide a valid subcommand")
