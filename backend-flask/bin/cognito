#!/usr/bin/env python3

import boto3
import click
import os
import sys
import json

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, ".."))
sys.path.append(parent_path)
from lib.db import db

def update_users_with_cognito_user_id(handle, sub):
    sql = """
    UPDATE public.users
    SET cognito_user_id = %(sub)s
    WHERE
    users.handle = %(handle)s;
    """
    db.query_single_noreturn(sql, {"handle": handle, "sub": sub})


def get_cognito_user_ids():
    userpool_id = os.getenv("AWS_COGNITO_USER_POOL_ID")
    client = boto3.client("cognito-idp")
    params = {
        "UserPoolId": userpool_id,
        "AttributesToGet": ["preferred_username", "sub"],
    }
    response = client.list_users(**params)
    users = response["Users"]
    dict_users = {}
    for user in users:
        attrs = user["Attributes"]
        sub = next((a for a in attrs if a["Name"] == "sub"), None)
        handle = next((a for a in attrs if a["Name"] == "preferred_username"), None)
        dict_users[handle["Value"]] = sub["Value"]
    return dict_users

@click.group()
def cli():
    pass

@click.command()
def list_users():
    print(json.dumps(get_cognito_user_ids(), sort_keys=True, indent=2, default=str))


@click.command()
def sync_users():
    users = get_cognito_user_ids()
    print(f"Syncing {len(users)} record(s) from Cognito to Postgres")
    for handle, sub in users.items():
        print(f"---- Adding to db: {handle}: {sub}")
        update_users_with_cognito_user_id(handle=handle, sub=sub)

cli.add_command(list_users, name="list")
cli.add_command(sync_users, name="sync")

if __name__ == '__main__':
    cli()
